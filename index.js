require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    process.exit(1);
}

const bot = new TelegramBot(TOKEN, { 
    polling: {
        interval: 30000,
        timeout: 10,
        autoStart: true
    }
});

const db = new sqlite3.Database('reminders.db');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
    db.run(`
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            reminder_text TEXT,
            reminder_time DATETIME,
            sent INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err);
        } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    });
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
function parseTime(timeString) {
    console.log(`üïí –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è: "${timeString}"`);
    
    // –§–æ—Ä–º–∞—Ç "2024-12-31 23:59" - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC+3 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/.test(timeString)) {
        const [datePart, timePart] = timeString.split(' ');
        const [year, month, day] = datePart.split('-').map(Number);
        const [hours, minutes] = timePart.split(':').map(Number);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (UTC+3) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        const moscowTime = new Date(Date.UTC(year, month - 1, day, hours, minutes));
        moscowTime.setHours(moscowTime.getHours() - 3); // –í—ã—á–∏—Ç–∞–µ–º 3 —á–∞—Å–∞ –¥–ª—è UTC
        
        const utcTime = moscowTime.toISOString().slice(0, 19).replace('T', ' ');
        
        console.log(`üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${timeString} (–ú–°–ö) -> ${utcTime} (UTC)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if (moscowTime <= new Date()) {
            throw new Error('–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ');
        }
        
        return {
            localTime: timeString,
            utcTime: utcTime
        };
    }
    
    // –§–æ—Ä–º–∞—Ç "in X minutes" - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É UTC –≤—Ä–µ–º–µ–Ω–∏
    if (timeString.startsWith('in ')) {
        const parts = timeString.split(' ');
        const amount = parseInt(parts[1]);
        const unit = parts[2].toLowerCase();
        
        console.log(`‚è±Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${amount} ${unit}`);
        
        const resultTime = new Date();
        
        if (unit.startsWith('minute')) {
            resultTime.setMinutes(resultTime.getMinutes() + amount);
        } else if (unit.startsWith('hour')) {
            resultTime.setHours(resultTime.getHours() + amount);
        } else if (unit.startsWith('day')) {
            resultTime.setDate(resultTime.getDate() + amount);
        } else {
            resultTime.setMinutes(resultTime.getMinutes() + amount);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º
        if (resultTime <= new Date()) {
            throw new Error('–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ');
        }
        
        const utcTime = resultTime.toISOString().slice(0, 19).replace('T', ' ');
        const moscowTime = new Date(resultTime.getTime() + (3 * 60 * 60 * 1000)); // +3 —á–∞—Å–∞ –¥–ª—è –ú–°–ö
        
        const localTimeStr = moscowTime.toISOString().slice(0, 16).replace('T', ' ');
        
        console.log(`‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: ${localTimeStr} (–ú–°–ö), ${utcTime} (UTC)`);
        return {
            localTime: localTimeStr,
            utcTime: utcTime
        };
    }
    
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "2024-12-31 20:00" –∏–ª–∏ "in 5 minutes"');
}

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const processingMessages = new Set();

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º once —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (processingMessages.has(messageId)) {
        return;
    }
    processingMessages.add(messageId);
    
    const helpText = `
ü§ñ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render)

–ö–æ–º–∞–Ω–¥—ã:
/remind [—Ç–µ–∫—Å—Ç] at [–≤—Ä–µ–º—è] - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/debug - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/time - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

–ü—Ä–∏–º–µ—Ä—ã:
/remind –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ at 2024-12-31 20:00
/remind –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–ª–ª–µ–≥–æ–π at in 2 hours
/remind –ü—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ at in 2 minutes

üí° –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+3)
    `;
    
    bot.sendMessage(chatId, helpText)
        .finally(() => {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                processingMessages.delete(messageId);
            }, 1000);
        });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
bot.onText(/\/time/, (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    if (processingMessages.has(messageId)) return;
    processingMessages.add(messageId);
    
    const now = new Date();
    const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)); // UTC+3
    
    const timeInfo = `
üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:
üìç –ú–æ—Å–∫–≤–∞: ${moscowTime.toISOString().slice(0, 16).replace('T', ' ')}
üåê UTC: ${now.toISOString().slice(0, 16).replace('T', ' ')}
‚è∞ –°–µ—Ä–≤–µ—Ä: ${now.toLocaleString('ru-RU')}
    `;
    
    bot.sendMessage(chatId, timeInfo)
        .finally(() => {
            setTimeout(() => {
                processingMessages.delete(messageId);
            }, 1000);
        });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind - –û–î–ò–ù –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
let isProcessingRemind = false;

bot.onText(/\/remind (.+) at (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (processingMessages.has(messageId)) {
        console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
    }
    processingMessages.add(messageId);
    
    const reminderText = match[1];
    const reminderTime = match[2];
    
    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: "${reminderText}" –Ω–∞ –≤—Ä–µ–º—è: ${reminderTime}`);
    
    try {
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        const parsedTime = parseTime(reminderTime);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const nowUTC = new Date().toISOString().slice(0, 19).replace('T', ' ');
        console.log(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UTC: ${parsedTime.utcTime}`);
        console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ UTC: ${nowUTC}`);
        console.log(`‚è∞ –†–∞–∑–Ω–∏—Ü–∞: ${(new Date(parsedTime.utcTime + 'Z') - new Date()) / 1000} —Å–µ–∫—É–Ω–¥`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await new Promise((resolve, reject) => {
            db.run(
                'INSERT INTO reminders (chat_id, reminder_text, reminder_time) VALUES (?, ?, ?)',
                [chatId, reminderText, parsedTime.utcTime],
                function(err) {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                        reject(err);
                    } else {
                        console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${this.lastID}`);
                        resolve(this.lastID);
                    }
                }
            );
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await bot.sendMessage(chatId, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n"${reminderText}"\n‚è∞ –Ω–∞ ${parsedTime.localTime} (–ú–°–ö)`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error.message);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await bot.sendMessage(chatId, `‚ùå ${error.message}`);
    } finally {
        // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        setTimeout(() => {
            processingMessages.delete(messageId);
        }, 1000);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.onText(/\/debug/, (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    if (processingMessages.has(messageId)) return;
    processingMessages.add(messageId);
    
    const nowUTC = new Date().toISOString().slice(0, 19).replace('T', ' ');
    const nowMoscow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));
    
    db.all(
        'SELECT * FROM reminders WHERE chat_id = ? ORDER BY reminder_time',
        [chatId],
        (err, rows) => {
            if (err) {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
                    .finally(() => {
                        setTimeout(() => {
                            processingMessages.delete(messageId);
                        }, 1000);
                    });
                return;
            }
            
            let message = `üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:\n`;
            message += `üìç –ú–æ—Å–∫–≤–∞: ${nowMoscow.toISOString().slice(0, 16).replace('T', ' ')}\n`;
            message += `üåê UTC: ${nowUTC.slice(0, 16)}\n\n`;
            
            if (rows.length === 0) {
                message += 'üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç';
            } else {
                message += `üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (${rows.length}):\n\n`;
                rows.forEach(row => {
                    const status = row.sent ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç';
                    const moscowTime = new Date(new Date(row.reminder_time + 'Z').getTime() + (3 * 60 * 60 * 1000));
                    const localTimeStr = moscowTime.toISOString().slice(0, 16).replace('T', ' ');
                    const timeDiff = (new Date(row.reminder_time + 'Z') - new Date()) / 1000;
                    const timeLeft = timeDiff > 0 ? `—á–µ—Ä–µ–∑ ${Math.round(timeDiff / 60)} –º–∏–Ω` : '–î–û–õ–ñ–ù–û –°–†–ê–ë–û–¢–ê–¢–¨';
                    
                    message += `üìç "${row.reminder_text}"\n`;
                    message += `‚è∞ ${localTimeStr} (–ú–°–ö)\n`;
                    message += `üïí ${timeLeft} | ${status}\n`;
                    message += `üÜî ID: ${row.id}\n\n`;
                });
            }
            
            bot.sendMessage(chatId, message)
                .finally(() => {
                    setTimeout(() => {
                        processingMessages.delete(messageId);
                    }, 1000);
                });
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.onText(/\/clear/, (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    if (processingMessages.has(messageId)) return;
    processingMessages.add(messageId);
    
    db.run(
        'DELETE FROM reminders WHERE chat_id = ?',
        [chatId],
        function(err) {
            if (err) {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
                    .finally(() => {
                        setTimeout(() => {
                            processingMessages.delete(messageId);
                        }, 1000);
                    });
            } else {
                const deletedCount = this.changes;
                bot.sendMessage(chatId, `‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${deletedCount}`)
                    .finally(() => {
                        setTimeout(() => {
                            processingMessages.delete(messageId);
                        }, 1000);
                    });
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è chat_id: ${chatId}`);
            }
        }
    );
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    const now = new Date().toISOString().slice(0, 19).replace('T', ' ');
    const nowMoscow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...`);
    console.log(`üìç –ú–æ—Å–∫–≤–∞: ${nowMoscow.toISOString().slice(0, 16).replace('T', ' ')}`);
    console.log(`üåê UTC: ${now}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    db.all(
        'SELECT * FROM reminders WHERE reminder_time <= ? AND sent = 0',
        [now],
        (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
                return;
            }
            
            if (rows.length > 0) {
                console.log(`üì® –ù–∞–π–¥–µ–Ω–æ ${rows.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:`);
                
                rows.forEach(row => {
                    const moscowTime = new Date(new Date(row.reminder_time + 'Z').getTime() + (3 * 60 * 60 * 1000));
                    console.log(`- "${row.reminder_text}" (id: ${row.id})`);
                    console.log(`  –ú–æ—Å–∫–≤–∞: ${moscowTime.toISOString().slice(0, 16).replace('T', ' ')}`);
                    console.log(`  UTC: ${row.reminder_time}`);
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                rows.forEach(row => {
                    bot.sendMessage(row.chat_id, `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${row.reminder_text}`)
                        .then(() => {
                            db.run('UPDATE reminders SET sent = 1 WHERE id = ?', [row.id]);
                            console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${row.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
                        })
                        .catch(err => {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, err.message);
                        });
                });
            } else {
                console.log('üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç');
            }
        }
    );
}, 60000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.code, error.message);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!');
console.log('üì± –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É');